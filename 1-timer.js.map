{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nconst timerFields = {\n    days: document.querySelector('[data-days]'),\n    hours: document.querySelector('[data-hours]'),\n    minutes: document.querySelector('[data-minutes]'),\n    seconds: document.querySelector('[data-seconds]'),\n  };\n\nconst input = document.querySelector(\"#datetime-picker\");\n\nlet userSelectedDate;\n\nstartButton.disabled = true;\nlet isTimerActive = false;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose: function (selectedDates) {\n        if (selectedDates.length > 0) {\n            if (selectedDates[0] < new Date()) {\n                iziToast.error({\n                    message: 'Please choose a date in the future',\n                    layout: 2,\n                    position: 'topRight',\n                });\n                startButton.disabled = true;\n                startButton.classList.add('disabled');\n            } else {\n                userSelectedDate = selectedDates[0];\n                console.log(`Selected Date: ${userSelectedDate}`);\n                startButton.disabled = false;\n                startButton.classList.remove('disabled');\n            }\n        }\n    }\n    \n};\n\nflatpickr(input, options);\n\nclass Timer {\n\n constructor(timerFields) {\n     this.intervalId = null;\n     this.timerFields = timerFields;\n  }\n\n\n\n\n    convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n    }\n    \n    updateUi(time) {\n        this.timerFields.days.textContent = time.days.toString().padStart(2, \"0\");\n        this.timerFields.hours.textContent = time.hours.toString().padStart(2, \"0\");\n        this.timerFields.minutes.textContent = time.minutes.toString().padStart(2, \"0\");\n        this.timerFields.seconds.textContent = time.seconds.toString().padStart(2, \"0\");\n}\n\n    start(selectedDate) {\n        if (isTimerActive) {\n            return;\n        }\n      isTimerActive = true;\n      \n      input.setAttribute('disabled', 'true');\n\n        this.intervalId = setInterval(() => {\n            const now = new Date();\n            const timeLeft = selectedDate - now;\n\n            if (timeLeft <= 0) {\n                this.stop();\n                return;\n            }\n\n            const timeComponents = this.convertMs(timeLeft);\n            this.updateUi(timeComponents);\n            console.log(timeComponents);\n        }, 1000)\n\n        iziToast.success({\n      message: 'Timer started successfully!',\n      layout: 2,\n      position: 'topRight',\n    });\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n      isTimerActive = false;\n      startButton.disabled = false;\n      startButton.classList.remove('disabled');\n\n      input.removeAttribute('disabled');\n\n      iziToast.success({\n      message: 'Timer has ended!',\n      layout: 2,\n      position: 'topRight',\n    });\n    }\n    \n}\n\nconst timer = new Timer(timerFields);\nstartButton.addEventListener(\"click\", () => {\n  if (userSelectedDate) {\n    timer.start(userSelectedDate);\n      startButton.disabled = true;\n      startButton.classList.add('disabled');\n  }\n});\n"],"names":["startButton","timerFields","input","userSelectedDate","isTimerActive","options","selectedDates","iziToast","flatpickr","Timer","ms","days","hours","minutes","seconds","time","selectedDate","timeLeft","timeComponents","timer"],"mappings":"+IAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,CAChB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EAEMC,EAAQ,SAAS,cAAc,kBAAkB,EAEvD,IAAIC,EAEJH,EAAY,SAAW,GACvB,IAAII,EAAgB,GAEpB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAS,SAAUC,EAAe,CAC1BA,EAAc,OAAS,IACnBA,EAAc,CAAC,EAAI,IAAI,MACvBC,EAAS,MAAM,CACX,QAAS,qCACT,OAAQ,EACR,SAAU,UAC9B,CAAiB,EACDP,EAAY,SAAW,GACvBA,EAAY,UAAU,IAAI,UAAU,IAEpCG,EAAmBG,EAAc,CAAC,EAClC,QAAQ,IAAI,kBAAkBH,CAAgB,EAAE,EAChDH,EAAY,SAAW,GACvBA,EAAY,UAAU,OAAO,UAAU,GAGlD,CAEL,EAEAQ,EAAUN,EAAOG,CAAO,EAExB,MAAMI,CAAM,CAEX,YAAYR,EAAa,CACrB,KAAK,WAAa,KAClB,KAAK,YAAcA,CACrB,CAKC,UAAUS,EAAI,CAQhB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACnC,CAED,SAASC,EAAM,CACX,KAAK,YAAY,KAAK,YAAcA,EAAK,KAAK,WAAW,SAAS,EAAG,GAAG,EACxE,KAAK,YAAY,MAAM,YAAcA,EAAK,MAAM,WAAW,SAAS,EAAG,GAAG,EAC1E,KAAK,YAAY,QAAQ,YAAcA,EAAK,QAAQ,WAAW,SAAS,EAAG,GAAG,EAC9E,KAAK,YAAY,QAAQ,YAAcA,EAAK,QAAQ,WAAW,SAAS,EAAG,GAAG,CACtF,CAEI,MAAMC,EAAc,CACZZ,IAGNA,EAAgB,GAEhBF,EAAM,aAAa,WAAY,MAAM,EAEnC,KAAK,WAAa,YAAY,IAAM,CAEhC,MAAMe,EAAWD,EADL,IAAI,KAGhB,GAAIC,GAAY,EAAG,CACf,KAAK,KAAI,EACT,MACH,CAED,MAAMC,EAAiB,KAAK,UAAUD,CAAQ,EAC9C,KAAK,SAASC,CAAc,EAC5B,QAAQ,IAAIA,CAAc,CAC7B,EAAE,GAAI,EAEPX,EAAS,QAAQ,CACnB,QAAS,8BACT,OAAQ,EACR,SAAU,UAChB,CAAK,EACA,CAED,MAAO,CACH,cAAc,KAAK,UAAU,EAC/BH,EAAgB,GAChBJ,EAAY,SAAW,GACvBA,EAAY,UAAU,OAAO,UAAU,EAEvCE,EAAM,gBAAgB,UAAU,EAEhCK,EAAS,QAAQ,CACjB,QAAS,mBACT,OAAQ,EACR,SAAU,UAChB,CAAK,CACA,CAEL,CAEA,MAAMY,EAAQ,IAAIV,EAAMR,CAAW,EACnCD,EAAY,iBAAiB,QAAS,IAAM,CACtCG,IACFgB,EAAM,MAAMhB,CAAgB,EAC1BH,EAAY,SAAW,GACvBA,EAAY,UAAU,IAAI,UAAU,EAE1C,CAAC"}